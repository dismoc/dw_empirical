sf <- sf %>% mutate(quintile = ntile(r_delt, 5))
# Binary regressions + robustness
feols(dw_bin ~ asinh(r_delt) + reserve_asset_ratio + reserve_loan_ratio | State + month, sf, se='white')
feols(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se = 'white', family = binomial(link = "probit"))
sf
View(sf)
feols(log(DW) ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW) ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='cluster') #increasing reserve demand by 1 decile increases borrowing probability by
dwborrow %>% count(Date)
dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),] %>% count(Date)
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),])
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], sum)
# Show the number of discount window borrowing in each quarter
left_join(dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),] %>% count(Date),
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], sum))
# Show the number of discount window borrowing in each quarter
plot1 <- left_join(dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),] %>% count(Date),
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], sum))
setnames(plot1, old=c('n','Loan.amount'), new=c('Count','Amount'))
xtable(plot1)
library('xtable')
xtable(plot1)
plot1
plot1$Date <- as.chracter(plot1$Date)
plot1$Amount <- paste0(plot1$Amount/1e9,'B')
plot1
# Show the number of discount window borrowing in each quarter
plot1 <- left_join(dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),] %>% count(Date),
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], sum))
setnames(plot1, old=c('n','Loan.amount'), new=c('Count','Amount'))
plot1$Date <- as.chracter(plot1$Date)
plot1$Amount <- paste0(round(plot1$Amount/1e9,2),' B')
xtable(plot1)
plot1$Date <- as.character(plot1$Date)
xtable(plot1)
print(xtable(plot1))
print(xtable(plot1), include.rownames=FALSE)
print(xtable(plot1), include.rownames=FALSE)
aggregate(reserve_deposit_ratio ~ Date, df)
aggregate(reserve_deposit_ratio ~ Date, df, mean)
plot1 <- left_join(plot1,
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], mean))
# Show the number of discount window borrowing in each quarter
plot1 <- left_join(dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),] %>% count(Date),
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], sum))
plot1 <- left_join(plot1,
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], mean))
plot1
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], mean)
plot1 <- merge(plot1,
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], mean))
plot1
plot1 <- left_join(plot1,
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], mean), by='Date')
plot1
# Show the number of discount window borrowing in each quarter
plot1 <- left_join(dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),] %>% count(Date),
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], sum))
plot1 <- left_join(plot1,
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], mean), by='Date')
plot1
setnames(plot1, old=c('n','Loan.amount.x','Loan.amount.y'), new=c('Count','Amount','Mean'))
plot1
plot1$Date <- as.character(plot1$Date)
plot1$Amount <- paste0(round(plot1$Amount/1e9,2),' B')
plot1$Mean <- paste0(round(plot1$Mean/1e6,2),' M')
plot1
print(xtable(plot1), include.rownames=FALSE)
# Show the number of discount window borrowing in each quarter
plot1 <- left_join(dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),] %>% count(Date),
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], sum))
plot1 <- left_join(plot1,
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], median), by='Date')
setnames(plot1, old=c('n','Loan.amount.x','Loan.amount.y'), new=c('Count','Amount','Mean'))
plot1$Date <- as.character(plot1$Date)
plot1$Amount <- paste0(round(plot1$Amount/1e9,2),' B')
plot1$Mean <- paste0(round(plot1$Mean/1e6,2),' M')
print(xtable(plot1), include.rownames=FALSE)
plot1
pppm
dwborrow1 <- dwborrow
dwborrow1$month <- month(dwborrow$Date)
rm(dwborrow1)
aggregate(RCON2200 ~ Date, df, sum)
15519842744/13220600835
unique(pppm$DateApproved)
plot1 <- subset(df, as.Date(Date) >= as.Date('2019-01-01'))
plot1[is.na(plot1$RCONLG27) == TRUE,'RCONLG27'] <- 0
plot1 <- aggregate(cbind(nonppp_loans,RCONLG27) ~ Date, plot1, sum)
plot1 <- plot1 %>% gather('Loan Type', val,-Date)
plot1$Date <- as.Date(plot1$Date)
plot1$`Loan Type` <- ifelse(plot1$`Loan Type` == 'RCONLG27', 'PPP Loans', 'Non-PPP Loans')
plot1
plot1 <- subset(df, as.Date(Date) >= as.Date('2019-01-01'))
plot1[is.na(plot1$RCONLG27) == TRUE,'RCONLG27'] <- 0
plot1 <- aggregate(cbind(nonppp_loans,RCONLG27) ~ Date, plot1, sum)
ploit1
plot1
plot1$RCONLG27/(plot1$RCONLG27 + plot1$nonppp_loans)
pppm
quantile(pppm$InitialApprovalAmount, .8)
quantile(pppm$InitialApprovalAmount, .9)
quantile(pppm$InitialApprovalAmount, .95)
quantile(pppm$InitialApprovalAmount, .99)
quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01))
plot(quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01)))
ggplot(quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01)))
ggplot(quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01))) + geom_line
ggplot(quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01))) + geom_line()
data.frame(quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01)))
data.frame(c('Percentile','Value') = quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01)))
data.frame(Percentile = quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01)))
data.frame(Percentile = quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01))[1])
data.frame(quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01)))[,1]
data.frame(quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01)))[,0]
data.frame(quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01)))[,2]
data.frame(quantile(pppm$InitialApprovalAmount, seq(0,1, by=.01)))[,1]
pplf
descr(pplf$processing_time)
sf
# Aggregate Data 2: correlation between dw borrowing (binary) and uncovered ppp loans (ppp loans - ppplf advance) -------
# Bank Level Data
sf <- left_join(pppm,unique(pplf[,c('Institution.RSSD','Institution.ABA')]),by=c('rssd' = 'Institution.RSSD')) %>% select(-contains("..."))
sf <- full_join(sf, data.frame(aggregate(Original.Outstanding.Advance.Amount ~ Institution.RSSD + Date.Of.Advance, pplf, sum)),
by=c('rssd' = 'Institution.RSSD', 'DateApproved' = 'Date.Of.Advance')) %>% select(-contains("..."))
sf <- left_join(sf,dwborrow[,c('Loan.date','Borrower.ABA.number','Loan.amount')], by=c('Institution.ABA' = 'Borrower.ABA.number', 'DateApproved' = 'Loan.date'))
sf
temp <- subset(df, as.Date(Date) == as.Date('2020-03-31'))[,c('IDRSSD','reserve_asset_ratio','reserve_loan_ratio','RCON0010')]
temp$IDRSSD <- as.numeric(as.character(temp$IDRSSD))
sf <- left_join(sf, temp, by=c('rssd' = 'IDRSSD'))
sf
sf[is.na(sf$Original.Outstanding.Advance.Amount),c('Original.Outstanding.Advance.Amount')] <- 0
sf[is.na(sf$Loan.amount),c('Loan.amount')] <- 0
setnames(sf, old=c('DateApproved','InitialApprovalAmount', 'Original.Outstanding.Advance.Amount', 'Loan.amount','OriginatingLenderState'),
new = c('Date','PPP','PPPLF','DW','State'))
sf$dw_bin <- ifelse(sf$DW > 0, 1, 0)
sf$r_delt <- -sf$PPPLF + sf$PPP
sf <- sf[order(sf$rssd,sf$Date),]
sf$month <- month(sf$Date)
sf <- sf %>% mutate(quintile = ntile(r_delt, 5))
sf
sf <- left_join(pppm,unique(pplf[,c('Institution.RSSD','Institution.ABA')]),by=c('rssd' = 'Institution.RSSD')) %>% select(-contains("..."))
sf <- full_join(sf, data.frame(aggregate(Original.Outstanding.Advance.Amount ~ Institution.RSSD + Date.Of.Advance, pplf, sum)),
by=c('rssd' = 'Institution.RSSD', 'DateApproved' = 'Date.Of.Advance')) %>% select(-contains("..."))
sf <- left_join(sf,dwborrow[,c('Loan.date','Borrower.ABA.number','Loan.amount')], by=c('Institution.ABA' = 'Borrower.ABA.number', 'DateApproved' = 'Loan.date'))
temp <- subset(df, as.Date(Date) == as.Date('2020-03-31'))[,c('IDRSSD','reserve_asset_ratio','reserve_loan_ratio','RCON0010')]
temp$IDRSSD <- as.numeric(as.character(temp$IDRSSD))
sf <- left_join(sf, temp, by=c('rssd' = 'IDRSSD'))
sf
sf[is.na(sf$Original.Outstanding.Advance.Amount),c('Original.Outstanding.Advance.Amount')] <- 0
sf[is.na(sf$Loan.amount),c('Loan.amount')] <- 0
setnames(sf, old=c('DateApproved','InitialApprovalAmount', 'Original.Outstanding.Advance.Amount', 'Loan.amount','OriginatingLenderState'),
new = c('Date','PPP','PPPLF','DW','State'))
sf
sf$dw_bin <- ifelse(sf$DW > 0, 1, 0)
sf$r_delt <- -sf$PPPLF + sf$PPP
sf <- sf[order(sf$rssd,sf$Date),]
sf$month <- month(sf$Date)
sf <- sf %>% mutate(quintile = ntile(r_delt, 5))
sf$r_delt
sf$demand_so_reserves <- sf$r_delt/sf$RCON0010
sf$demand_so_reserves
feols(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio | State + month, sf, se='white')
descr(sf$demand_so_reserves)
sf$demand_so_reserves <- sf$r_delt/(sf$RCON0010*1000)
feols(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio | State + month, sf, se='white')
descr(sf$demand_so_reserves)
sf$RCON0010
display(sf$RCON0010)
sf[!is.na(RCON0010),'RCON0010']
sf[!is.na(sf$RCON0010),'RCON0010']
unique(sf[!is.na(sf$RCON0010),'RCON0010'])
quantile(sf$demand_so_reserves, rep(0,1,by=.05))
quantile(sf$demand_so_reserves, rep(0,1,by=.05), na.rm=TRUE)
quantile(sf$demand_so_reserves, seq(0,1,by=.05))
quantile(sf$demand_so_reserves, swq(0,1,by=.05), na.rm=TRUE)
quantile(sf$demand_so_reserves, seq(0,1,by=.05), na.rm=TRUE)
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se = 'white', family = binomial(link = "probit"))
feols(log(DW) ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW+1) ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(asinh(DW) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW+1) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
# Binary regressions + robustness
feols(dw_bin ~ asinh(r_delt) + reserve_asset_ratio + reserve_loan_ratio | State + month, sf, se='white')
feols(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se = 'white', family = binomial(link = "probit"))
# Elasticity regressions
feols(asinh(DW) ~ asinh(r_delt) + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW+1) ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW) ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio| State, sf, se = 'white', family = binomial(link = "probit"))
df$bigsmall
sf <- left_join(pppm,unique(pplf[,c('Institution.RSSD','Institution.ABA')]),by=c('rssd' = 'Institution.RSSD')) %>% select(-contains("..."))
sf <- full_join(sf, data.frame(aggregate(Original.Outstanding.Advance.Amount ~ Institution.RSSD + Date.Of.Advance, pplf, sum)),
by=c('rssd' = 'Institution.RSSD', 'DateApproved' = 'Date.Of.Advance')) %>% select(-contains("..."))
sf <- left_join(sf,dwborrow[,c('Loan.date','Borrower.ABA.number','Loan.amount')], by=c('Institution.ABA' = 'Borrower.ABA.number', 'DateApproved' = 'Loan.date'))
temp <- subset(df, as.Date(Date) == as.Date('2020-03-31'))[,c('size','IDRSSD','reserve_asset_ratio','reserve_loan_ratio','RCON0010')]
temp$IDRSSD <- as.numeric(as.character(temp$IDRSSD))
sf <- left_join(sf, temp, by=c('rssd' = 'IDRSSD'))
sf[is.na(sf$Original.Outstanding.Advance.Amount),c('Original.Outstanding.Advance.Amount')] <- 0
sf[is.na(sf$Loan.amount),c('Loan.amount')] <- 0
setnames(sf, old=c('DateApproved','InitialApprovalAmount', 'Original.Outstanding.Advance.Amount', 'Loan.amount','OriginatingLenderState'),
new = c('Date','PPP','PPPLF','DW','State'))
sf$dw_bin <- ifelse(sf$DW > 0, 1, 0)
sf$r_delt <- -sf$PPPLF + sf$PPP
sf <- sf[order(sf$rssd,sf$Date),]
sf$month <- month(sf$Date)
sf <- sf %>% mutate(quintile = ntile(r_delt, 5))
sf$demand_so_reserves <- sf$r_delt/(sf$RCON0010*1000)
# Regression on demand share of reserves using reserve data from Q1 2020
feols(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se='white')
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State, sf, se = 'white', family = binomial(link = "probit"))
feols(asinh(DW) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
# Binary regressions + robustness
feols(dw_bin ~ asinh(r_delt) + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se='white')
feols(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se = 'white', family = binomial(link = "probit"))
# Elasticity regressions
feols(asinh(DW) ~ asinh(r_delt) + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW) ~ quintile + reserve_asset_ratio + reserve_loan_ratio| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
# Elasticity regressions
feols(asinh(DW) ~ asinh(r_delt) + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW) ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
sf
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State, sf, se = 'white', family = binomial(link = "probit"))
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se = 'white', family = binomial(link = "probit"))
sf
# Regression on demand share of reserves using reserve data from Q1 2020
feols(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| rssd + month, sf, se='white')
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| rssd + month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| rssd + month, sf, se = 'white', family = binomial(link = "probit"))
feols(asinh(DW) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| rssd + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| rssd + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW+1) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW+1) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| rssd + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW) ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
# Regression on demand share of reserves using reserve data from Q1 2020
feols(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State:month, sf, se='white')
# Regression on demand share of reserves using reserve data from Q1 2020
feols(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white')
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se = 'white', family = binomial(link = "probit"))
feols(asinh(DW) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW+1) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
# Binary regressions + robustness
feols(dw_bin ~ asinh(r_delt) + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white')
feols(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se = 'white', family = binomial(link = "probit"))
# Elasticity regressions
feols(asinh(DW) ~ asinh(r_delt) + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW) ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW+1) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se = 'white', family = binomial(link = "probit"))
feols(log(DW) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW+1) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
# Binary regressions + robustness
feols(dw_bin ~ asinh(r_delt) + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white')
feols(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se = 'white', family = binomial(link = "probit"))
# Elasticity regressions
feols(asinh(DW) ~ asinh(r_delt) + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW) ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State^month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
library(tidyverse)
library(mlr3verse)
library(plm)
library(pglm)
library(readxl)
library(dplyr)
library('DataCombine')
library('stargazer')
library('simpleboot')
library('Rpdb')
library('data.table')
library(ggplot2)
library('zoo')
library('fixest')
library('timeDate')
library('DescTools')
library('summarytools')
library(gtools)
library(lubridate)
library('fuzzyjoin')
library(readr)
library('ggpubr')
# Regression on demand share of reserves using reserve data from Q1 2020
feols(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se='white')
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se = 'white', family = binomial(link = "probit"))
feols(asinh(DW) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(log(DW+1) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se = 'white', family = binomial(link = "probit"))
# Binary regressions + robustness
feols(dw_bin ~ asinh(r_delt) + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se='white')
feols(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se = 'white', family = binomial(link = "probit"))
feglm(dw_bin ~ quintile + reserve_asset_ratio + reserve_loan_ratio + size| State + month, sf, se = 'white', family = binomial(link = "logit"))
# Regression on demand share of reserves using reserve data from Q1 2020
feols(dw_bin ~ demand_so_reserves:month + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se='white')
# Regression on demand share of reserves using reserve data from Q1 2020
feols(dw_bin ~ demand_so_reserves*month + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se='white')
feglm(dw_bin ~ demand_so_reserves*month + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se = 'white', family = binomial(link = "logit"))
# Regression on demand share of reserves using reserve data from Q1 2020
feols(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf, se='white')
ppb2<- aggregate(Original.Outstanding.Advance.Amount ~ Date.Of.Advance, pplf, sum)
sf <- full_join(ppb, ppb2, by=c('DateApproved' = 'Date.Of.Advance'))
sf <- sf[order(sf$DateApproved),]
sf[is.na(sf)] <- 0
sf$tot_change <- sf$Original.Outstanding.Advance.Amount - sf$InitialApprovalAmount
sf$cumu <- cumsum(sf[, 'tot_change'])
dwborrow1 <- dwborrow %>% count(Loan.date)
dwborrow2 <- aggregate(Loan.amount ~ Loan.date, dwborrow, FUN = sum)
dwborrow1 <- subset(full_join(dwborrow2,dwborrow1), as.Date(Loan.date) >= as.Date('2020-01-01'))
sf <- full_join(sf,dwborrow1, by=c('DateApproved' = 'Loan.date')) %>% select(-contains("..."))
sf <- subset(sf, as.Date(DateApproved) <= as.Date('2020-10-01'))
sf <- sf[order(sf$DateApproved),]
ind <- which(is.na(sf$n) == TRUE)
for (i in 2:length(ind)) {
if (ind[i] == ind[i-1]+1) {
ind <- ind[-i]
}
print(length(ind))
}
sf[ind+1,'InitialApprovalAmount'] <- sf[ind+1,'InitialApprovalAmount'] + sf[ind,'InitialApprovalAmount']
sf <- sf[-ind,]
ind <- which(is.na(sf$n) == TRUE)
ind <- ind[1:length(ind)-1]
sf[ind+1,'InitialApprovalAmount'] <- sf[ind+1,'InitialApprovalAmount'] + sf[ind,'InitialApprovalAmount']
sf <- sf[-ind,]
ind <- which(is.na(sf$n) == TRUE)
sf[ind-1,'InitialApprovalAmount'] <- sf[ind-1,'InitialApprovalAmount'] + sf[ind,'InitialApprovalAmount']
sf <- sf[-ind,]
rm(ind, dwborrow1, dwborrow2)
# Creation
sf <- sf[sf$InitialApprovalAmount != 0,]
sf$cumu <- sf$cumu$tot_change
sf$cumu_init <- 4075359310000 + sf$cumu
sf$InitialApprovalAmount <- ifelse(is.na(sf$InitialApprovalAmount) == TRUE & as.Date(sf$DateApproved) <= as.Date('2020-04-02'), 0, sf$InitialApprovalAmount)
sf$InitialApprovalAmount <- ifelse(is.na(sf$InitialApprovalAmount) == TRUE & as.Date(sf$DateApproved) >= as.Date('2020-08-10'), 0, sf$InitialApprovalAmount)
sf$ppp_week_avg <- rollapply(sf$InitialApprovalAmount, 5, mean, na.rm=TRUE, fill = NA, partial=3)
sf$dw_quant_avg <- rollapply(sf$Loan.amount, 5, mean, na.rm=TRUE, fill = NA, partial=3)
sf$cum_quant_avg <- rollapply(sf$cumu, 5, mean, na.rm=TRUE, fill = NA, partial=3)
sf$tchange_avg <- rollapply(sf$tot_change, 5, mean, na.rm=TRUE, fill = NA, partial=3)
sf$id <- 1
sf$signal <- ifelse(as.Date(sf$DateApproved) >= as.Date('2020-03-16') & as.Date(sf$DateApproved) <= as.Date('2020-03-21'), 1, 0)
sf$preppp <- ifelse(as.Date(sf$DateApproved) <= as.Date('2020-04-02'), 0, 1)
# Figures
ggplot(sf) +
geom_line(aes(x = DateApproved, y = InitialApprovalAmount/3, colour ='PPP')) +
geom_line(aes(x = DateApproved, y = Loan.amount, colour ='DW')) +
scale_y_continuous(name = "Moving Avg of DW Loan", sec.axis = sec_axis(~.*3, name="Moving Avg of PPP Loan")) +
labs(x="Date") + theme(legend.position = c(.9, .9))
ggplot(sf) +
geom_line(aes(x = DateApproved, y = log(InitialApprovalAmount), colour ='PPP')) +
geom_line(aes(x = DateApproved, y = log(Loan.amount), colour ='DW')) +
labs(x="Date") + theme(legend.position = c(.9, .9))
ggplot(sf) +
geom_line(aes(x = DateApproved, y = log(ppp_week_avg), colour ='PPP')) +
geom_line(aes(x = DateApproved, y = log(dw_quant_avg), colour ='DW')) +
labs(x="Date") + theme(legend.position = c(.9, .9))
ggplot(subset(sf, as.Date(DateApproved) >= as.Date('2020-04-01') &as.Date(DateApproved) <= as.Date('2020-08-10'))) +
geom_line(aes(x = DateApproved, y = log(ppp_week_avg+1), colour ='PPP')) +
geom_line(aes(x = DateApproved, y = log(dw_quant_avg+1), colour ='DW')) +
labs(x="Date") + theme(legend.position = c(.9, .9))
sf
sf2 <- left_join(pppm,unique(pplf[,c('Institution.RSSD','Institution.ABA')]),by=c('rssd' = 'Institution.RSSD')) %>% select(-contains("..."))
sf2 <- full_join(sf2, data.frame(aggregate(Original.Outstanding.Advance.Amount ~ Institution.RSSD + Date.Of.Advance, pplf, sum)),
by=c('rssd' = 'Institution.RSSD', 'DateApproved' = 'Date.Of.Advance')) %>% select(-contains("..."))
sf2 <- left_join(sf2,dwborrow[,c('Loan.date','Borrower.ABA.number','Loan.amount')], by=c('Institution.ABA' = 'Borrower.ABA.number', 'DateApproved' = 'Loan.date'))
temp <- subset(df, as.Date(Date) == as.Date('2020-03-31'))[,c('size','IDRSSD','reserve_asset_ratio','reserve_loan_ratio','RCON0010')]
temp$IDRSSD <- as.numeric(as.character(temp$IDRSSD))
sf2 <- left_join(sf2, temp, by=c('rssd' = 'IDRSSD'))
sf2[is.na(sf2$Original.Outstanding.Advance.Amount),c('Original.Outstanding.Advance.Amount')] <- 0
sf2[is.na(sf2$Loan.amount),c('Loan.amount')] <- 0
setnames(sf2, old=c('DateApproved','InitialApprovalAmount', 'Original.Outstanding.Advance.Amount', 'Loan.amount','OriginatingLenderState'),
new = c('Date','PPP','PPPLF','DW','State'))
sf2$dw_bin <- ifelse(sf2$DW > 0, 1, 0)
sf2$r_delt <- -sf2$PPPLF + sf2$PPP
sf2 <- sf2[order(sf2$rssd,sf2$Date),]
sf2$month <- month(sf2$Date)
sf2 <- sf2 %>% mutate(quintile = ntile(r_delt, 5))
sf2$demand_so_reserves <- sf2$r_delt/(sf2$RCON0010*1000)
quantile(sf2$demand_so_reserves, seq(0,1,by=.01))
quantile(sf2$demand_so_reserves, seq(0,1,by=.01), na.rm = TRUE)
0:100
# Stylized Facts - Quantile graph of demand shock to reserves
plot1 <- data.frame(Percentile = 0:100, `Share of Reserves` = quantile(sf2$demand_so_reserves, seq(0,1,by=.01), na.rm = TRUE))
plot1
ggplot(plot1, aes(x=Percentile, y=Share.of.Reserves)) + geom_point()
ggplot(plot1, aes(x=Percentile, y=log(Share.of.Reserves))) + geom_point()
ggplot(plot1, aes(x=Percentile, y=log(Share.of.Reserves,10))) + geom_point()
ggplot(plot1, aes(x=Percentile, y=log10(Share.of.Reserves))) + geom_point()
log10(plot1$Share.of.Reserves)
ggplot(plot1, aes(x=Percentile, y=Share.of.Reserves)) + geom_point()
ggplot(plot1, aes(x=Percentile, y=Share.of.Reserves)) + geom_point() +
scale_y_log10
ggplot(plot1, aes(x=Percentile, y=Share.of.Reserves)) + geom_point() +
scale_y_log10()
plot1
nrow(plot1)
ggplot(plot1[2:nrow(plot1),], aes(x=Percentile, y=Share.of.Reserves)) + geom_point() +
scale_y_log10()
ggplot(plot1[2:nrow(plot1),], aes(x=Percentile, y=Share.of.Reserves)) + geom_point() +
scale_y_log10() + scale_x_continuous(breaks=.05)
ggplot(plot1[2:nrow(plot1),], aes(x=Percentile, y=Share.of.Reserves)) + geom_point() +
scale_y_log10() + scale_x_continuous(breaks=.05, n.breaks=20)
ggplot(plot1[2:nrow(plot1),], aes(x=Percentile, y=Share.of.Reserves)) + geom_point() +
scale_y_log10() + scale_x_continuous(breaks=seq(0,1,by=.05))
seq(0,1,by=.05)
ggplot(plot1[2:nrow(plot1),], aes(x=Percentile, y=Share.of.Reserves)) + geom_point() +
scale_y_log10() + scale_x_continuous(breaks=seq(0,100,by=5))
ggplot(plot1[2:nrow(plot1),], aes(x=Percentile, y=Share.of.Reserves)) + geom_point() +
scale_y_log10() + scale_x_continuous(breaks=seq(0,100,by=5)) +
ylab('Demand Share of Reserves')
ggplot(plot1[2:nrow(plot1),], aes(x=Percentile, y=Share.of.Reserves)) + geom_point() +
scale_y_log10() + scale_x_continuous(breaks=seq(0,100,by=5)) +
ylab('Demand Share of Reserves') +
theme(text = element_text(size = 20))
ggplot(plot1[2:nrow(plot1),], aes(x=Percentile, y=Share.of.Reserves)) + geom_point() +
scale_y_log10() + scale_x_continuous(breaks=seq(0,100,by=5)) +
ylab('Demand Share of Reserves') +
theme(text = element_text(size = 18))
plot1 <- left_join(dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),] %>% count(Date),
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], sum))
plot1 <- left_join(plot1,
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], median), by='Date')
setnames(plot1, old=c('n','Loan.amount.x','Loan.amount.y'), new=c('Count','Amount','Mean'))
plot1$Date <- as.character(plot1$Date)
plot1$Amount <- paste0(round(plot1$Amount/1e9,2),' B')
plot1$Mean <- paste0(round(plot1$Mean/1e6,2),' M')
print(xtable(plot1), include.rownames=FALSE)
library(mlr3verse)
library(plm)
library(pglm)
library(readxl)
library(dplyr)
library('DataCombine')
library('stargazer')
library('simpleboot')
library('Rpdb')
library('data.table')
library(ggplot2)
library('zoo')
library('fixest')
library('timeDate')
library('xtable')
library('scales')
plot1 <- left_join(dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),] %>% count(Date),
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], sum))
plot1 <- left_join(plot1,
aggregate(Loan.amount ~ Date, dwborrow[as.Date(dwborrow$Date) > as.Date('2019-06-01'),], median), by='Date')
setnames(plot1, old=c('n','Loan.amount.x','Loan.amount.y'), new=c('Count','Amount','Mean'))
plot1$Date <- as.character(plot1$Date)
plot1$Amount <- paste0(round(plot1$Amount/1e9,2),' B')
plot1$Mean <- paste0(round(plot1$Mean/1e6,2),' M')
print(xtable(plot1), include.rownames=FALSE)
plot1 <- subset(df, as.Date(Date) >= as.Date('2019-01-01'))
plot1[is.na(plot1$RCONLG27) == TRUE,'RCONLG27'] <- 0
plot1 <- aggregate(cbind(nonppp_loans,RCONLG27) ~ Date, plot1, sum)
plot1 <- plot1 %>% gather('Loan Type', val,-Date)
plot1$Date <- as.Date(plot1$Date)
plot1$`Loan Type` <- ifelse(plot1$`Loan Type` == 'RCONLG27', 'PPP Loans', 'Non-PPP Loans')
ggplot(plot1, aes(x=Date,y=val,fill=`Loan Type`)) + geom_area() +
scale_y_continuous(labels = unit_format(unit = "T", scale = 1e-9)) +
ylab('Quantity') + theme(legend.position = c(.2, .5)) +
scale_color_hue(labels = c("T999", "T888")) +
scale_x_date(breaks = date_breaks("3 months")) +
theme(text = element_text(size = 18))
ggplot(plot1, aes(x=Date,y=val,fill=`Loan Type`)) + geom_area() +
scale_y_continuous(labels = unit_format(unit = "T", scale = 1e-9)) +
ylab('Quantity') + theme(legend.position = c(.2, .5)) +
scale_color_hue(labels = c("T999", "T888")) +
scale_x_date(breaks = date_breaks("3 months")) +
theme(text = element_text(size = 16))
# Stylized Facts - Quantile graph of demand shock to reserves
plot1 <- data.frame(Percentile = 0:100, `Share of Reserves` = quantile(sf2$demand_so_reserves, seq(0,1,by=.01), na.rm = TRUE))
plot1
sf2
feols(log(DW/r_delt) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf2, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
feols(asinh(DW/r_delt) ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf2, se='white') #increasing reserve demand by 1 decile increases borrowing probability by
sf2
aggregate(cbind(PPPLF, DW) ~ rssd, sf2, sum)
#What share of banks go to PPPLF and DW?
plot1 <- aggregate(cbind(PPPLF, DW) ~ rssd, sf2, sum)
sf2
plot1
subset(plot1, plot1$PPPLF > 0 & plot1$DW>0)
length(subset(plot1, plot1$PPPLF > 0 & plot1$DW>0))
length(subset(plot1, plot1$PPPLF > 0 & plot1$DW>0)$rssd)
# Regression on demand share of reserves using reserve data from Q1 2020
feols(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf2, se='white')
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf2, se = 'white', family = binomial(link = "logit"))
feglm(dw_bin ~ demand_so_reserves + reserve_asset_ratio + reserve_loan_ratio + size + log(PPPLF+1)| State + month, sf2, se = 'white', family = binomial(link = "probit"))
aggregate(cbind(DW, PPPLF) ~., sf2, sum)
sf2
colSums(sf2$DW)
sum(sf2$DW)
sum(sf2$PPPLF)
111326793121/32600185300
